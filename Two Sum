import java.util.HashMap;

public class Solution {
    public int[] twoSum(int[] nums, int target) {
        // Create a HashMap to store numbers and their indices
        HashMap<Integer, Integer> numToIndex = new HashMap<>();
        
        // Iterate through the array
        for (int i = 0; i < nums.length; i++) {
            // Calculate the complement
            int complement = target - nums[i];
            
            // Check if the complement is already in the HashMap
            if (numToIndex.containsKey(complement)) {
                return new int[] {numToIndex.get(complement), i};
            }
            
            // Store the current number and its index in the HashMap
            numToIndex.put(nums[i], i);
        }
        
        // If no solution is found (shouldn't happen per problem constraints)
        throw new IllegalArgumentException("No two sum solution");
    }

    // Example usage (for local testing)
    public static void main(String[] args) {
        Solution solution = new Solution();
        
        int[] nums1 = {2, 7, 11, 15};
        int target1 = 9;

        int[] result = solution.twoSum(nums1, target1);
        System.out.println("Indices: [" + result[0] + ", " + result[1] + "]");
    }
}
